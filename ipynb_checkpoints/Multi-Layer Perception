{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ar4UK18gWmCs"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.special import expit\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import time\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "#np.seterr(divide='ignore', invalid='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "lbt9lkiDz2nu"
   },
   "outputs": [],
   "source": [
    "def cross_entropy_loss(y_one_hot,y_prob):\n",
    "    return -np.sum(y_one_hot*np.log(y_prob))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "LdA-F3J8OfXH"
   },
   "outputs": [],
   "source": [
    "def cal_con_matrix_multi(actual,predicted):\n",
    "  return np.array(pd.crosstab(actual,predicted))\n",
    "\n",
    "def get_precision_multi(cm):\n",
    "  return np.array([cm[i][i]/np.sum(cm[:,i]) for i in range(10)])\n",
    "  \n",
    "def get_recall_multi(cm):\n",
    "  return np.array([cm[i][i]/np.sum(cm[i]) for i in range(10)])\n",
    "\n",
    "def get_f1_score(cm):\n",
    "  recall = get_recall_multi(cm)\n",
    "  precision = get_precision_multi(cm)\n",
    "  return 2*recall*precision/(recall+precision)\n",
    "\n",
    "def get_report(actual,predicted):\n",
    "  cm = cal_con_matrix_multi(actual,predicted)\n",
    "  print('CLASSIFICAION REPORT \\n \\n')\n",
    "  print('Accuracy %.4f \\n'%(get_acc(actual,predicted)))\n",
    "  print('Number of correct predictions %d / %d \\n'%(np.sum(actual==predicted),actual.shape[0]))\n",
    "  print('Confusion Matrix\\n',cm)\n",
    "  recall = get_recall_multi(cm)\n",
    "  precision = get_precision_multi(cm)\n",
    "  f1_score = get_f1_score(cm)\n",
    "  print('\\nNumber  Recall  Precision  f1_Score')\n",
    "  for i in range(10):\n",
    "    print('%-7d %.6f %.6f %.6f'%(i,recall[i],precision[i],f1_score[i]))\n",
    "  print('Average %.6f %.6f %.6f'%(np.mean(recall),np.mean(precision),np.mean(f1_score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XDwe4CFtSVZS"
   },
   "outputs": [],
   "source": [
    "def cal_con_matrix(actual,predicted):\n",
    "    confusion_matrix = np.zeros((2,2),dtype=int)\n",
    "    np.add.at(confusion_matrix,[actual,predicted],1)\n",
    "    return confusion_matrix\n",
    "  \n",
    "def cal_precision(t_pos,f_pos):\n",
    "    return t_pos/(t_pos+f_pos)\n",
    "\n",
    "def cal_recall(t_pos,f_neg):\n",
    "    return t_pos/(t_pos+f_neg)\n",
    "\n",
    "def cal_fpr(f_pos,t_neg):\n",
    "    return f_pos/(t_neg+f_pos)\n",
    "\n",
    "def cal_tpr(t_pos,f_neg):\n",
    "    return t_pos/(t_pos+f_neg)\n",
    "\n",
    "def cal_fscore(t_neg,f_pos,f_neg,t_pos):\n",
    "    precision = cal_precision(t_pos,f_pos)\n",
    "    recall = cal_recall(t_pos,f_neg)\n",
    "    return 2*(precision*recall)/(precision+recall)\n",
    "\n",
    "def class_report(actual,predicted):\n",
    "  cm = cal_con_matrix(actual,predicted)\n",
    "  print('CLASSIFICAION REPORT \\n \\n')\n",
    "  print('Accuracy %.4f \\n'%(get_acc(actual,predicted)))\n",
    "  print('Number of correct predictions %d / %d \\n'%(np.sum(actual==predicted),actual.shape[0]))\n",
    "  print('Confusion Matrix\\n',cm)\n",
    "  cm=np.array(cm)\n",
    "  t_n=cm[0][0]\n",
    "  f_p=cm[0][1]\n",
    "  f_n=cm[1][0]\n",
    "  t_p=cm[1][1]\n",
    "  \n",
    "  precision = cal_precision(t_p,f_p)\n",
    "  recall = cal_recall(t_p,t_n)\n",
    "  f1_score = cal_fscore(t_n,f_p,f_n,t_p)\n",
    "  \n",
    "  print(\"Recall %.4f\"%(recall))\n",
    "  print(\"Precision %.4f\"%(precision))\n",
    "  print(\"F1 score %.4f\"%(f1_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GDpqbX38z2qh"
   },
   "outputs": [],
   "source": [
    "def softmax(z):\n",
    "  e_x = np.exp(z -np.max(z))\n",
    "  return e_x/ np.sum(e_x, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "DQqsocpVz3FG"
   },
   "outputs": [],
   "source": [
    "def error_score(y,preds):\n",
    "  idx = np.argmax(preds)\n",
    "  idx2 = np.argmax(y)\n",
    "  return idx == idx2\n",
    "\n",
    "def error_bin(y,pred):\n",
    "  pred=pred>0.5\n",
    "  return y==pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nz1DYX2V-7kA"
   },
   "outputs": [],
   "source": [
    "def plot_loss_epochs(train,val):\n",
    "  #plt.subplot(1,2,1)  \n",
    "  plt.figure(figsize=(10, 6))\n",
    "  plt.plot(train, \"r-+\", linewidth=3, label=\"Training loss\")\n",
    "  plt.plot(val, \"b-\", linewidth=2, label=\"Validation Score\")\n",
    "  plt.legend(loc=\"best\", fontsize=18)   \n",
    "  plt.xlabel(\"Epochs\", fontsize=18) \n",
    "  plt.ylabel(\"Average Loss\", fontsize=14) \n",
    "  plt.title(\"Train loss vs Epochs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "61LeAeO5BGmE"
   },
   "outputs": [],
   "source": [
    "def plot_score_epochs(val):\n",
    "  plt.figure(figsize=(10, 6))\n",
    " # plt.subplot(1,2,2)\n",
    "  plt.plot(val, \"r-+\", linewidth=3, label=\"Validation Score\")\n",
    "  plt.legend(loc=\"best\", fontsize=18)   \n",
    "  plt.xlabel(\"Epochs\", fontsize=18) \n",
    "  plt.ylabel(\"Average Validation Score\", fontsize=14) \n",
    "  plt.title(\"Validation Score vs Epochs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "POiQVwJk0p87"
   },
   "outputs": [],
   "source": [
    "def get_acc(y,preds):\n",
    "  return np.mean(y==preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VZTjvttzxnkI"
   },
   "outputs": [],
   "source": [
    "#1-5 + extra credits\n",
    "class MLPClassifier():\n",
    "  def initializeTheta(self,in_neurons,out_neurons):\n",
    "    self.theta1=np.random.uniform(low=-1, high=1, size=(in_neurons+1,self.hidden_layer_neurons))\n",
    "    self.theta2=np.random.uniform(low=-1, high=1, size=(self.hidden_layer_neurons+1,out_neurons))\n",
    "  \n",
    "  def logistic(self,z):\n",
    "    return expit(z)\n",
    "  \n",
    "  def logistic_der(self,z):\n",
    "    return self.logistic(z)*(1-self.logistic(z))\n",
    "  \n",
    "  def relu(self,z):\n",
    "    z[z<0]=0\n",
    "    return z\n",
    "\n",
    "  def relu_der(self,z):\n",
    "    z[z<=0]=0\n",
    "    z[z>0]=1\n",
    "    return z\n",
    "\n",
    "  def tanh(self,z):\n",
    "    return np.tanh(z)\n",
    "\n",
    "  def tanh_der(self,z):\n",
    "    return 1-self.tanh(z)**2\n",
    "\n",
    "  def feed_forward(self,X):\n",
    "    a1 = self.activation(np.dot(self.theta1.T,X))\n",
    "    ones = np.ones(1) \n",
    "    a1 = np.concatenate((ones,a1))\n",
    "    if not self.binary:\n",
    "      a2 = softmax(np.dot(self.theta2.T,a1))\n",
    "    else:\n",
    "      a2=self.logistic(np.dot(self.theta2.T,a1))\n",
    "    return a1,a2\n",
    "  \n",
    "  def error(self,y,preds):\n",
    "    return (y-preds)/y.shape[0]\n",
    "\n",
    "  def adaptive_learning_rate(self):\n",
    "    self.learning_rate_init =self.learning_rate_init/10\n",
    "\n",
    "  def back_prop(self,a1,a2,X,y):\n",
    "    if not self.binary:\n",
    "      grad = self.error(y,np.dot(self.theta2.T,a1))\n",
    "      delta = np.multiply(a2-y,grad)\n",
    "      grad2 = self.derivative(np.dot(self.theta1.T,X))\n",
    "      ones = np.ones(1) \n",
    "      grad2 = np.concatenate((ones,grad2))\n",
    "      self.theta2 += self.learning_rate_init*np.dot(a1.reshape(a1.shape[0],1),grad.reshape(1,y.shape[0]))-self.alpha*self.theta2\n",
    "      self.theta1-= self.learning_rate_init*np.dot(X.reshape(X.shape[0],1),np.multiply(grad2,np.dot(self.theta2,grad)).reshape(1,self.hidden_layer_neurons+1))[:,1:]-self.alpha*self.theta1\n",
    "    else:\n",
    "      grad2 = self.derivative(np.dot(self.theta1.T,X))\n",
    "      ones = np.ones(1) \n",
    "      grad2 = np.concatenate((ones,grad2))      \n",
    "      self.theta2 -= self.learning_rate_init*np.multiply(a1.reshape(a1.shape[0],1),(a2-y).reshape(1,1))/self.size-self.alpha*self.theta2\n",
    "      self.theta1-= self.learning_rate_init*np.dot(X.reshape(X.shape[0],1),np.multiply(grad2,np.dot(self.theta2,(a2-y))).reshape(1,self.hidden_layer_neurons+1))[:,1:]/self.size-self.alpha*self.theta1\n",
    "\n",
    "  def fit(self, X, Y, hidden_layer_neurons=2, activation= 'logistic', regularizer=None,alpha=0.0001,\n",
    "          learning_rate='constant', learning_rate_init=0.001,max_iter=1000, tol = 0.0001, verbose=False, early_stopping=False,\n",
    "          validation_fraction=0.1, n_iter_no_change=10,**kwargs):\n",
    "    self.alpha=alpha\n",
    "    self.hidden_layer_neurons = hidden_layer_neurons\n",
    "    self.learning_rate_init=learning_rate_init\n",
    "    self.binary = True if len(np.unique(Y)) ==2 else False\n",
    "    self.size = X.shape[0]\n",
    "    learn = learning_rate_init\n",
    "    #selecting activation \n",
    "    if activation =='tanh':\n",
    "      self.activation=self.tanh\n",
    "      self.derivative =self.tanh_der\n",
    "    elif activation=='relu':\n",
    "      self.activation=self.relu\n",
    "      self.derivative=self.relu_der\n",
    "    else:\n",
    "      self.activation=self.logistic\n",
    "      self.derivative=self.logistic_der\n",
    "\n",
    "    decay = learning_rate_init/max_iter\n",
    "    learn = self.learning_rate_init\n",
    "    if not self.binary:\n",
    "      y_train=one_hot_lables(Y)\n",
    "      self.initializeTheta(64,10)\n",
    "    else:\n",
    "      y_train = Y\n",
    "      self.initializeTheta(X.shape[1],1)\n",
    "    ones = np.ones([X.shape[0],1])\n",
    "    X_train = np.concatenate((ones,X),axis=1)\n",
    "    avg_val_score = []\n",
    "    avg_train_loss = [] \n",
    "    avg_val_loss = []\n",
    "    if early_stopping:\n",
    "      X_train,X_val,y_train,y_val = partition(X_train,y_train,validation_fraction)\n",
    "    for i in range(max_iter):\n",
    "      start = time.time()\n",
    "      val_loss = np.zeros(X_val.shape[0])\n",
    "      train_loss = np.zeros(X_train.shape[0])\n",
    "      rand_idx_train = np.arange(0,X_train.shape[0])\n",
    "      random.shuffle(rand_idx_train)\n",
    "      for m in range(X_train.shape[0]):\n",
    "        #feed forward\n",
    "        idx = rand_idx_train[m]\n",
    "        #feed forward\n",
    "        a1,a2 = self.feed_forward(X_train[idx])\n",
    "        train_loss[m]= cross_entropy_loss(y_train[idx],a2)\n",
    "        #back propogation\n",
    "        self.back_prop(a1,a2,X_train[idx],np.array(y_train[idx]))\n",
    "        #early stopping val score\n",
    "      if early_stopping:\n",
    "        val_score = np.zeros(X_val.shape[0])\n",
    "        rand_idx_val = np.arange(0,X_val.shape[0])\n",
    "        random.shuffle(rand_idx_val)\n",
    "        for n in range(X_val.shape[0]):\n",
    "          idx = rand_idx_val[n]\n",
    "          a1,a2 = self.feed_forward(X_val[idx])\n",
    "          if not self.binary:\n",
    "            val_score[n]= error_score(y_val[idx],a2)\n",
    "          else:\n",
    "            val_score[n]= error_bin(y_val[idx],a2)\n",
    "          val_loss[n]= cross_entropy_loss(y_val[idx],a2)\n",
    "        avg_val_score.append(np.mean(val_score))\n",
    "        avg_val_loss.append(np.mean(val_loss))\n",
    "      avg_train_loss.append(np.mean(train_loss))\n",
    "      end = time.time()\n",
    "      print(\"Epoch %4d of %4d : Training Loss %-2.5f | Validation loss %-2.5f | Validation Score %-2.5f | Eta %-2.2fs\" \n",
    "            %(i+1,max_iter,np.mean(train_loss),np.mean(val_loss),np.mean(val_score),(end-start)))\n",
    "  \n",
    "      if n_iter_no_change<i and early_stopping:\n",
    "        score = np.mean(np.absolute(avg_val_score[-n_iter_no_change:]))\n",
    "        loss = np.mean(np.absolute(avg_val_loss[-n_iter_no_change:]))\n",
    "        if np.mean(val_score) <=score+tol:\n",
    "          if learning_rate != 'constant' and self.learning_rate_init>10**-5*learn:\n",
    "              self.adaptive_learning_rate()\n",
    "              print('\\nChaning learning rate to',self.learning_rate_init)\n",
    "          else:\n",
    "            print('\\n Validation Score not imporving for %d iterations'%(n_iter_no_change))\n",
    "            break\n",
    "    if early_stopping:\n",
    "      plot_loss_epochs(avg_train_loss,avg_val_loss)\n",
    "      plot_score_epochs(avg_val_score)\n",
    "      plt.show() \n",
    "\n",
    "  def predict(self,X):\n",
    "    if not self.binary:\n",
    "      preds = []\n",
    "      ones = np.ones([X.shape[0],1])\n",
    "      X= np.concatenate((ones,X),axis=1)\n",
    "      for x in X:\n",
    "        a1,a2 = self.feed_forward(x)\n",
    "        preds.append(np.argmax(a2))\n",
    "      return preds\n",
    "    else:\n",
    "      preds = np.zeros((X.shape[0]),dtype=int)\n",
    "      ones = np.ones([X.shape[0],1])\n",
    "      X= np.concatenate((ones,X),axis=1)\n",
    "      for i in range(X.shape[0]):\n",
    "        a1,a2 = self.feed_forward(X[i])\n",
    "        preds[i]=int (a2>0.5)\n",
    "      return preds\n",
    "\n",
    "  def __init__(self):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KoaV6xkk-KSA"
   },
   "outputs": [],
   "source": [
    "def standardize(X):\n",
    "    return (X-np.mean(X,axis = 0))/np.std(X,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "owjzJ6p--nrM"
   },
   "outputs": [],
   "source": [
    "def partition(data,target,t):\n",
    "    train_data, test_data = np.split(data, [int((1-t)*len(data))])\n",
    "    target_train,target_test = np.split(target, [int((1-t)*len(target))])\n",
    "    return train_data,test_data,target_train,target_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jAUjF772-2vk"
   },
   "outputs": [],
   "source": [
    "def one_hot_lables(y):\n",
    "  return np.array((pd.get_dummies(y)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "Fsgyb58cQJM-",
    "outputId": "31ecda61-a66a-4d89-e049-0484717ba701"
   },
   "outputs": [],
   "source": [
    "#6-7\n",
    "from sklearn.datasets import load_digits\n",
    "digits = load_digits()\n",
    "X = standardize(digits.data)\n",
    "targets = digits.target\n",
    "X[np.isnan(X)]=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yboegI3un1zc"
   },
   "outputs": [],
   "source": [
    "#8\n",
    "X_train,X_test,y_train,y_test =partition(X,digits.target,0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "FwjL3R0WZQSS",
    "outputId": "e45607b4-c270-49c1-a9a0-24cee851fb8e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch    1 of 1000 : Training Loss 18.83418 | Validation loss 12.17567 | Validation Score 0.06250 | Eta 0.41s\n",
      "Epoch    2 of 1000 : Training Loss 9.15119 | Validation loss 8.21269 | Validation Score 0.06250 | Eta 0.40s\n",
      "Epoch    3 of 1000 : Training Loss 6.12143 | Validation loss 5.91455 | Validation Score 0.10417 | Eta 0.39s\n",
      "Epoch    4 of 1000 : Training Loss 4.67136 | Validation loss 4.31888 | Validation Score 0.15278 | Eta 0.40s\n",
      "Epoch    5 of 1000 : Training Loss 3.80186 | Validation loss 3.59144 | Validation Score 0.20139 | Eta 0.39s\n",
      "Epoch    6 of 1000 : Training Loss 3.32812 | Validation loss 3.06406 | Validation Score 0.24306 | Eta 0.39s\n",
      "Epoch    7 of 1000 : Training Loss 2.88655 | Validation loss 2.69624 | Validation Score 0.26389 | Eta 0.39s\n",
      "Epoch    8 of 1000 : Training Loss 2.64208 | Validation loss 2.32969 | Validation Score 0.31944 | Eta 0.41s\n",
      "Epoch    9 of 1000 : Training Loss 2.42316 | Validation loss 2.29886 | Validation Score 0.27778 | Eta 0.39s\n",
      "Epoch   10 of 1000 : Training Loss 2.26509 | Validation loss 2.15736 | Validation Score 0.34028 | Eta 0.40s\n",
      "Epoch   11 of 1000 : Training Loss 2.13145 | Validation loss 2.09056 | Validation Score 0.33333 | Eta 0.38s\n",
      "Epoch   12 of 1000 : Training Loss 2.05528 | Validation loss 2.03195 | Validation Score 0.34722 | Eta 0.38s\n",
      "Epoch   13 of 1000 : Training Loss 1.97970 | Validation loss 1.96339 | Validation Score 0.40972 | Eta 0.38s\n",
      "Epoch   14 of 1000 : Training Loss 1.92486 | Validation loss 1.91946 | Validation Score 0.37500 | Eta 0.38s\n",
      "Epoch   15 of 1000 : Training Loss 1.86691 | Validation loss 1.84479 | Validation Score 0.47917 | Eta 0.39s\n",
      "Epoch   16 of 1000 : Training Loss 1.83578 | Validation loss 1.79791 | Validation Score 0.47222 | Eta 0.38s\n",
      "Epoch   17 of 1000 : Training Loss 1.80794 | Validation loss 1.82444 | Validation Score 0.48611 | Eta 0.39s\n",
      "Epoch   18 of 1000 : Training Loss 1.77309 | Validation loss 1.75804 | Validation Score 0.52778 | Eta 0.37s\n",
      "Epoch   19 of 1000 : Training Loss 1.75889 | Validation loss 1.78161 | Validation Score 0.56250 | Eta 0.37s\n",
      "Epoch   20 of 1000 : Training Loss 1.73933 | Validation loss 1.80230 | Validation Score 0.59028 | Eta 0.38s\n",
      "Epoch   21 of 1000 : Training Loss 1.72424 | Validation loss 1.72177 | Validation Score 0.66667 | Eta 0.38s\n",
      "Epoch   22 of 1000 : Training Loss 1.70745 | Validation loss 1.74059 | Validation Score 0.64583 | Eta 0.38s\n",
      "Epoch   23 of 1000 : Training Loss 1.69193 | Validation loss 1.68075 | Validation Score 0.67361 | Eta 0.39s\n",
      "Epoch   24 of 1000 : Training Loss 1.68730 | Validation loss 1.70548 | Validation Score 0.70139 | Eta 0.39s\n",
      "Epoch   25 of 1000 : Training Loss 1.67894 | Validation loss 1.65052 | Validation Score 0.75694 | Eta 0.38s\n",
      "Epoch   26 of 1000 : Training Loss 1.66694 | Validation loss 1.70154 | Validation Score 0.72917 | Eta 0.38s\n",
      "Epoch   27 of 1000 : Training Loss 1.65847 | Validation loss 1.68910 | Validation Score 0.78472 | Eta 0.38s\n",
      "Epoch   28 of 1000 : Training Loss 1.66166 | Validation loss 1.68392 | Validation Score 0.80556 | Eta 0.40s\n",
      "Epoch   29 of 1000 : Training Loss 1.65098 | Validation loss 1.66852 | Validation Score 0.79861 | Eta 0.38s\n",
      "Epoch   30 of 1000 : Training Loss 1.65208 | Validation loss 1.65356 | Validation Score 0.80556 | Eta 0.38s\n",
      "Epoch   31 of 1000 : Training Loss 1.64225 | Validation loss 1.69742 | Validation Score 0.81250 | Eta 0.37s\n",
      "Epoch   32 of 1000 : Training Loss 1.64218 | Validation loss 1.66591 | Validation Score 0.82639 | Eta 0.38s\n",
      "Epoch   33 of 1000 : Training Loss 1.63899 | Validation loss 1.66314 | Validation Score 0.85417 | Eta 0.38s\n",
      "Epoch   34 of 1000 : Training Loss 1.63639 | Validation loss 1.65377 | Validation Score 0.83333 | Eta 0.38s\n",
      "Epoch   35 of 1000 : Training Loss 1.63480 | Validation loss 1.67005 | Validation Score 0.84028 | Eta 0.38s\n",
      "Epoch   36 of 1000 : Training Loss 1.63055 | Validation loss 1.66381 | Validation Score 0.84722 | Eta 0.38s\n",
      "Epoch   37 of 1000 : Training Loss 1.62833 | Validation loss 1.66630 | Validation Score 0.86806 | Eta 0.38s\n",
      "Epoch   38 of 1000 : Training Loss 1.62536 | Validation loss 1.66839 | Validation Score 0.86806 | Eta 0.38s\n",
      "Epoch   39 of 1000 : Training Loss 1.62844 | Validation loss 1.67106 | Validation Score 0.88889 | Eta 0.38s\n",
      "Epoch   40 of 1000 : Training Loss 1.62261 | Validation loss 1.66562 | Validation Score 0.89583 | Eta 0.37s\n",
      "Epoch   41 of 1000 : Training Loss 1.62357 | Validation loss 1.64965 | Validation Score 0.90278 | Eta 0.38s\n",
      "Epoch   42 of 1000 : Training Loss 1.62202 | Validation loss 1.64792 | Validation Score 0.90278 | Eta 0.39s\n",
      "Epoch   43 of 1000 : Training Loss 1.61999 | Validation loss 1.66163 | Validation Score 0.88889 | Eta 0.38s\n",
      "Epoch   44 of 1000 : Training Loss 1.62108 | Validation loss 1.64766 | Validation Score 0.90972 | Eta 0.37s\n",
      "Epoch   45 of 1000 : Training Loss 1.61811 | Validation loss 1.66550 | Validation Score 0.88194 | Eta 0.38s\n",
      "Epoch   46 of 1000 : Training Loss 1.62225 | Validation loss 1.63522 | Validation Score 0.92361 | Eta 0.38s\n",
      "Epoch   47 of 1000 : Training Loss 1.61435 | Validation loss 1.65629 | Validation Score 0.93056 | Eta 0.43s\n",
      "Epoch   48 of 1000 : Training Loss 1.61731 | Validation loss 1.67356 | Validation Score 0.90972 | Eta 0.43s\n",
      "Epoch   49 of 1000 : Training Loss 1.61873 | Validation loss 1.65753 | Validation Score 0.91667 | Eta 0.39s\n",
      "Epoch   50 of 1000 : Training Loss 1.61793 | Validation loss 1.65059 | Validation Score 0.93056 | Eta 0.39s\n",
      "Epoch   51 of 1000 : Training Loss 1.61671 | Validation loss 1.64355 | Validation Score 0.91667 | Eta 0.37s\n",
      "Epoch   52 of 1000 : Training Loss 1.61389 | Validation loss 1.66382 | Validation Score 0.92361 | Eta 0.37s\n",
      "Epoch   53 of 1000 : Training Loss 1.61642 | Validation loss 1.65823 | Validation Score 0.93056 | Eta 0.41s\n",
      "Epoch   54 of 1000 : Training Loss 1.61484 | Validation loss 1.64442 | Validation Score 0.93056 | Eta 0.41s\n",
      "Epoch   55 of 1000 : Training Loss 1.61491 | Validation loss 1.64614 | Validation Score 0.93750 | Eta 0.38s\n",
      "Epoch   56 of 1000 : Training Loss 1.61366 | Validation loss 1.66103 | Validation Score 0.93056 | Eta 0.38s\n",
      "Epoch   57 of 1000 : Training Loss 1.61530 | Validation loss 1.65154 | Validation Score 0.93750 | Eta 0.38s\n",
      "Epoch   58 of 1000 : Training Loss 1.61316 | Validation loss 1.65006 | Validation Score 0.93750 | Eta 0.40s\n",
      "Epoch   59 of 1000 : Training Loss 1.61238 | Validation loss 1.65929 | Validation Score 0.93750 | Eta 0.42s\n",
      "Epoch   60 of 1000 : Training Loss 1.61433 | Validation loss 1.65565 | Validation Score 0.93750 | Eta 0.39s\n",
      "Epoch   61 of 1000 : Training Loss 1.61371 | Validation loss 1.64181 | Validation Score 0.95139 | Eta 0.38s\n",
      "Epoch   62 of 1000 : Training Loss 1.61188 | Validation loss 1.66900 | Validation Score 0.93056 | Eta 0.38s\n",
      "Epoch   63 of 1000 : Training Loss 1.61565 | Validation loss 1.64559 | Validation Score 0.93056 | Eta 0.38s\n",
      "Epoch   64 of 1000 : Training Loss 1.61362 | Validation loss 1.64970 | Validation Score 0.93750 | Eta 0.38s\n",
      "Epoch   65 of 1000 : Training Loss 1.61254 | Validation loss 1.65016 | Validation Score 0.92361 | Eta 0.38s\n",
      "\n",
      "Chaning learning rate to 0.0001\n",
      "Epoch   66 of 1000 : Training Loss 1.61038 | Validation loss 1.65254 | Validation Score 0.93056 | Eta 0.38s\n",
      "\n",
      "Chaning learning rate to 1e-05\n",
      "Epoch   67 of 1000 : Training Loss 1.61053 | Validation loss 1.65176 | Validation Score 0.93056 | Eta 0.38s\n",
      "\n",
      "Chaning learning rate to 1.0000000000000002e-06\n",
      "Epoch   68 of 1000 : Training Loss 1.61022 | Validation loss 1.65171 | Validation Score 0.93056 | Eta 0.39s\n",
      "\n",
      "Chaning learning rate to 1.0000000000000002e-07\n",
      "Epoch   69 of 1000 : Training Loss 1.61019 | Validation loss 1.65170 | Validation Score 0.93056 | Eta 0.38s\n",
      "\n",
      "Chaning learning rate to 1.0000000000000002e-08\n",
      "Epoch   70 of 1000 : Training Loss 1.61019 | Validation loss 1.65171 | Validation Score 0.93056 | Eta 0.38s\n",
      "\n",
      "Chaning learning rate to 1.0000000000000003e-09\n",
      "Epoch   71 of 1000 : Training Loss 1.61019 | Validation loss 1.65171 | Validation Score 0.93056 | Eta 0.38s\n",
      "\n",
      " Validation Score not imporving for 20 iterations\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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nHvqKVi3Dp5+GkryM2n9enj//XDf4cMhK6v495C83L1Cv/bdd18vytdff11km8rgrbfecsAvv/zylG3+9a9/OeAXXHBBid5j//339x133DFP3YYNG3zdunWRrv/+++8d8JEjR5bo/Yu6fu3atZ6Tk1Oie5eW4447zgHv06eP33bbbf7www/78OHD/dBDD/WsrCxfvnx5RuPbWlXl35NspREjKs59i7pn7vkFC9wffNC9f3/3GjXcQ4rl3qCB+6mnuo8f7/777wWv27jRfcoU9yuucG/XLn5dul/9+7v/7395P8umTe4XXZS33YAB7mvWFP51yD3322/uzz/vfsop4XPn3qN7d/cvv4z6FS9437I6t7XXlgJgqqfIaTKeVG3tS0lZ3KZNm7xt27betGlTX79+fdI2p512mgP+2Wefleg9kiVlxZHupCzTPvnkEwf8hBNOSHp+/vz5GUka16xZ4xs3biyVe1WVf0+yFXJyYr9eStm6daV/382bwz0XLkz++u67cL5PH3ezohOh2rXdjznGfcyYUD7/fPfmzcsuEUt8XX996s981VV52/brl/rrMHduOHf00eHzFfaeffq4r10b7Wu/YkXhX/t0nItybdT4S0hJWRX6JTJ8+HAH/Pnnny9wbuXKlV63bl3ffffd89SPGzfOjzzySG/btq3XrFnTt912Wz/22GP9q6++KnCPZEnZoEGDPCsrq0Db999/33v27Om1a9f2Fi1a+GWXXeb/+c9/CiRVOTk5PnLkSO/du7c3b97ca9So4e3atfOLL77Yly5duqXdpEmTHCjwyo0nJyfHAT/nnHMKxPLAAw94ly5dvHbt2t6wYUM/9NBD/aOPPsrTJvH6Dz74wHv37u116tTxpk2b+nnnnee/J/4POIWxY8c64Pfff3+RbXOtWLHCr732Wt911129Vq1a3qRJE+/du7c/++yzedpNnz7d//jHP3rjxo29Vq1a3rlzZ7/99tt906ZNedrlfj8WLlzoZ5xxhjdr1szNzOfOnbulzVNPPeW9evXybbbZxuvUqeP77befv/DCC5HirUr/nqQYFi50f+ih0OuS24v0+eelc+8lS9zPOMO9evVw36lTt+5+pdVztc8+JbuuUSPfkrClehV2vqhzixYV/TXYvDkkbVub+G2/fcG6XXZxf//95O/51VfuN9zgvtdeW//e6Xrl+9lb2pSUlcUvkTLo8ozixx9/dDPzww8/vMC5Bx980AEfPXp0nvqePXv6Mccc4zfeeKM//PDDPnToUG/cuLHXr1/fZ8+enadt1KTso48+8po1a3rz5s09OzvbR40a5d26dfO99967QFL222+/eaNGjfycc87x22+/3e+//34/66yzvHr16r7XXnv5hg0b3D30Mt1+++2e2xM1duxYHzt2rL/88svunjopGzJkiAPeo0cPHz16tGdnZ3urVq28Ro0aPmHChC3tcq/v0qWLN2nSxK+++mp/4IEHfODAgQ74RRddVOTX/+OPP3bA+/XrF2mYcunSpd6xY0cHfODAgX7nnXf6qFGjfNCgQT548OAt7T755BOvU6eON2rUyK+77jq/6667/KCDDnIgT7vc70e1atV8jz328AEDBvjdd9/tt9xyy5YEd+jQoQ744Ycf7qNHj/Y777zT+/btGzmZVFImW1xxhfsdd7j37eterVrqX3Il/fm4ebP7uHHudesmv++110a/17Bh7m+95X7eeVvXc9WuXfjMc+aE+4L79Onuw4e777576uvq1XO/8EL3CRPc16+P/fotRGHnS3oumYMOKv7XoFmzkNBNnx7vadx//4Ltzj/f/S9/cf/0U/ehQ9133rn0E6h0vtL0e11JWVn8EinuP4Q0OvDAAz0rK8vnzZuXp75Hjx5es2ZNX7x4cZ76ZD1AX331ldeoUcMvu+yyPPVRk7Ju3bp5zZo1/fvvv99St27dOt9nn30KJGWbNm3yNWvWFIjhgQcecCBPD05hw5fJkrKZM2c64H379t2S3Lm7z5071+vXr+8dOnTY0tOUe321atX883z/wz/00EO9Zs2aSePMb8CAAQ54vXr1/JBDDvFhw4b5a6+95qtXry7Q9rzzznPAH3300QLnEnvAunfv7tWrV8/Te7l58+Yt89cmT568pX7QoEEO+BlnnFHgnp9++qkDPnz48ALnjjjiCG/YsGGRPYJKysRnznTfb79ov9jq1nV/553iv8ecOaHXrbB777CD+8SJqe/x++/uL7zgPmhQtEQj2atFi3D+oYfCnLL88v/i/vZb91tvde/VK1w3ZIj7hx+G3rnCrivqvqVxLpXHH3fv2LHwrwOEz/Xtt8nfc9Mm9/vuc69fP3rSk9ujWth7lva5KNfG/qOfLkrKUv0SyXQWXthrK4wbN84Bv/XWW7fUzZo1ywub6+QefsmvXLnSFy9e7IsXL/ZOnTp59+7d87SJkpTNmzfPAT/55JMLvMeTTz6ZMqlyd9+4caMvX77cFy9e7N99950D/pe//GXL+eImZTfddJMD/sYbbxRof8kllzjg06dPz3N93759C7S99dZbHfBZs2YljTvR+vXr/c477/Ru3bp5VlaW5w6zNmjQIE8v5caNG71Bgwa+xx57FHq/X3/91QE/8cQTC5z7/PPPHfA//elPW+pyk7Jkw8+XX365m5l///33W77Pua/cntR//etfhcajpKyKW7cu+ZCfmXvv3u6jRoXeoMRztWq5J/k3mNTw4aEnql69vPdo08b9iSeS/7wcPDgMcY4Y4b58ufvYse7HHutep07qn7EtWrhfcEE81sKU9GfyVv4sL3OFxRv1s8ydG+aepfq6b7ON+8CB7s88475yZcnfc2tiLY3PuRUKS8q0JEYldNxxx9GoUSMef/xxhg4dCsBjjz0GwNlnn12g/bRp0xg+fDhTpkxh9erVec7tvPPOxX7/H3/8EYCOHTsWONe5c+ek1zzzzDP885//ZMaMGQX2Vly+fHmxY8j1v//9D4DddtutwLndd999S7yJS4h06NChQNumTZsCsHTp0iLfs2bNmlx++eVcfvnlrFmzhmnTpvHGG29wzz33cOWVV9K6dWtOPPFEFi5cyKpVq1IuX5Ir9+uZ7DPk1uW2SZTsezdr1izcvdDv68KFCwuNR6q4Y44JyyrkN2QI3H57vHzJJfDyyzBvXlg64ZhjwtILxx+f/L6bNsGHH4ZtgBKZwaWXhmUd6teHH3+EHXYI75f7s+HJJ+HNN2HJktCuqLW3zjoLHn44voRDUavbl3T1+4q2an5h8Ub9LG3awF57wSuvFDx3yinw2GNQu/bWv+fWxFoanzNNlJRVQrVr1+bUU0/lvvvu4+OPP2a//fZj7NixtGnThkMPPTRP2zlz5tC3b1+aNGnC9ddfzy677EK9evUwMy677LISbT4d/iOQfJ/E3HOJnnvuOU455RR69OjBXXfdRZs2bahduzYbNmzgiCOOYPPmzcWOobD3K0pWIWvtFPd+devWpU+fPvTp04cDDjiAww8/nEcffZQTTzyx0K9T1PdMdW1WVha1kqyb5O5kZWXx5ptvUq1a8rWjc5NVqSKys6Mv/rl6dVhjK1Gqv5/33ANXXRW2+ZkzB3Jy4KSTwhpZ338f3nPDBnj3XXjppZDALVqU9x677RaSp54943W5m2oPGABXXAHPPBPKS5aEP/MnZJ07w3HHwY03wubNIcnLb2sWck3HdZlS0gVr87vhhvBaswbq1Qvf+1QLjJf0Pbcm1tL6nGlQtZOyEvzCTsmsdO+3lc455xzuu+8+Hn/8cZYtW8aCBQu47rrrCiQcL7zwAmvWrOHtt9+mT58+W+rdnSVLltCwYcNiv/eOO+4IhF6Z/JLVjR07lrp16/Lee+9RO+F/UP9NXI06prgbYufGMnPmTLbffvs8577++msgec9YOvTo0QOAefPmAdCyZUsaNGjA9OnTC70u8TPkV9zPsPPOO/POO++www47lKgXVCqZ9evDL8+ov4juuiueOLVpA7/8Unj7HXaADz6Agw6C774LvWGnnx5+Vs6eDa+/DitXpr7+2GPzJmSJWrQIPW9m4c/8DjoI7r0Xdt01lG+8MXlCJulTt274M+KOL6JtlkpPOeum3meffejSpQvPPvss99xzD2bGWWedVaBdbpKWvzfmgQceYEnu/zyLabvttqNr1668+OKLzJ49e0v9+vXrueOOO5LGUK1atTw9Yu6edCumbbbZBggr+0dx9NFHA3DbbbexMeF/0PPmzWPMmDF06NCBPffcM9oHi+Dbb79NOpQI8PLLLwPxIdysrCxOPvlkvvrqK8bkrrCdIPd70qpVK7p3787LL7+cJ6l1d2655RYAjj322EjxnX766QBce+21bEqy752GLquQGTNgl13C8ZNPFt1+xQr4xz/i5REjov3ca9MmrHyf2wOb+7Nm3LiCCVmLFuHPWbNCu/xDmck89RSsWgWjRoXyTz+Fa995J56Q5cYrZU9f92JR+lpaymE39TnnnMNll13GhAkT+MMf/rClxyXREUccwV//+lcGDRrEJZdcQsOGDfnoo494++232WGHHUr83qNGjeKggw5i//335+KLL6Zhw4Y89dRTSYfiTjjhBF555RUOPPBATj/9dNavX89LL73EunXrCrRt0aIF7du3Z9y4cbRv357mzZtTv359jjjiiKRxdO7cmSFDhjBq1CgOOOAABg4cyKpVq3jggQdYu3Yt9913X8phvJKYPn06gwYNol+/fvTt25c2bdrw+++/88knnzB+/HgaNmzI8OHDt7S/+eabmTx5MmeeeSZvv/02vXr1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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 27.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#9 + graphs \n",
    "a =MLPClassifier()\n",
    "a.fit(X_train,y_train,hidden_layer_neurons=150,early_stopping=True,activation='relu',regularizer='l2',learning_rate='adaptive',\n",
    "      n_iter_no_change=20,alpha=0.0000001,validation_fraction=0.1,verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 538
    },
    "colab_type": "code",
    "id": "wk_DRKJJjFAg",
    "outputId": "eedc2ee7-3e06-449a-ddf5-8b55e5dde877"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLASSIFICAION REPORT \n",
      " \n",
      "\n",
      "Accuracy 0.9784 \n",
      "\n",
      "Number of correct predictions 1406 / 1437 \n",
      "\n",
      "Confusion Matrix\n",
      " [[143   0   0   0   0   0   0   0   0   0]\n",
      " [  0 146   0   0   0   0   0   0   0   0]\n",
      " [  1   0 140   1   0   0   0   0   0   0]\n",
      " [  0   0   1 142   0   0   1   1   1   0]\n",
      " [  0   0   0   0 143   0   0   0   0   1]\n",
      " [  0   1   1   0   1 139   1   0   0   2]\n",
      " [  0   0   0   1   1   0 138   0   4   0]\n",
      " [  0   0   0   0   0   0   0 143   0   0]\n",
      " [  0   7   2   1   0   0   0   0 130   1]\n",
      " [  0   0   0   0   0   0   0   0   1 142]]\n",
      "\n",
      "Number  Recall  Precision  f1_Score\n",
      "0       1.000000 0.993056 0.996516\n",
      "1       1.000000 0.948052 0.973333\n",
      "2       0.985915 0.972222 0.979021\n",
      "3       0.972603 0.979310 0.975945\n",
      "4       0.993056 0.986207 0.989619\n",
      "5       0.958621 1.000000 0.978873\n",
      "6       0.958333 0.985714 0.971831\n",
      "7       1.000000 0.993056 0.996516\n",
      "8       0.921986 0.955882 0.938628\n",
      "9       0.993007 0.972603 0.982699\n",
      "Average 0.978352 0.978610 0.978298\n"
     ]
    }
   ],
   "source": [
    "#10\n",
    "train_preds=predictions=a.predict(X_train)\n",
    "get_report(np.array(y_train),np.array(train_preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 538
    },
    "colab_type": "code",
    "id": "KWzOUx6xYt5U",
    "outputId": "12ba7c51-606e-40fa-dc3e-6e300e2904cf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLASSIFICAION REPORT \n",
      " \n",
      "\n",
      "Accuracy 0.8917 \n",
      "\n",
      "Number of correct predictions 321 / 360 \n",
      "\n",
      "Confusion Matrix\n",
      " [[34  0  0  0  1  0  0  0  0  0]\n",
      " [ 0 30  0  2  0  0  0  0  0  4]\n",
      " [ 0  0 34  0  0  0  0  0  0  1]\n",
      " [ 0  1  4 27  0  1  0  2  2  0]\n",
      " [ 0  0  0  0 34  0  0  0  3  0]\n",
      " [ 0  1  0  0  0 35  0  0  0  1]\n",
      " [ 0  0  0  0  1  0 35  0  0  1]\n",
      " [ 0  0  0  0  0  1  0 34  1  0]\n",
      " [ 0  3  0  1  0  0  0  1 25  3]\n",
      " [ 0  1  0  1  0  1  0  1  0 33]]\n",
      "\n",
      "Number  Recall  Precision  f1_Score\n",
      "0       0.971429 1.000000 0.985507\n",
      "1       0.833333 0.833333 0.833333\n",
      "2       0.971429 0.894737 0.931507\n",
      "3       0.729730 0.870968 0.794118\n",
      "4       0.918919 0.944444 0.931507\n",
      "5       0.945946 0.921053 0.933333\n",
      "6       0.945946 1.000000 0.972222\n",
      "7       0.944444 0.894737 0.918919\n",
      "8       0.757576 0.806452 0.781250\n",
      "9       0.891892 0.767442 0.825000\n",
      "Average 0.891064 0.893317 0.890670\n"
     ]
    }
   ],
   "source": [
    "#10\n",
    "predictions=a.predict(X_test)\n",
    "get_report(np.array(y_test),np.array(predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "814f0zYwsaVv"
   },
   "source": [
    "#binary Classification\n",
    "#Extra Credits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EKeU9fDrscmo"
   },
   "outputs": [],
   "source": [
    "#making data binary\n",
    "y_bin = targets\n",
    "y_bin[y_bin!=5]=0\n",
    "y_bin[y_bin==5]=1\n",
    "X_train_bin,X_test_bin,y_train_bin,y_test_bin =partition(X,y_bin,0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "wQtg3u1FscoU",
    "outputId": "cf4baebf-65a9-4265-ef93-0758600ae48c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch    1 of 1000 : Training Loss 0.11823 | Validation loss 0.14161 | Validation Score 0.57639 | Eta 0.11s\n",
      "Epoch    2 of 1000 : Training Loss 0.15932 | Validation loss 0.18744 | Validation Score 0.63194 | Eta 0.11s\n",
      "Epoch    3 of 1000 : Training Loss 0.19757 | Validation loss 0.22264 | Validation Score 0.66667 | Eta 0.11s\n",
      "Epoch    4 of 1000 : Training Loss 0.22457 | Validation loss 0.24911 | Validation Score 0.70833 | Eta 0.11s\n",
      "Epoch    5 of 1000 : Training Loss 0.24351 | Validation loss 0.26842 | Validation Score 0.70833 | Eta 0.10s\n",
      "Epoch    6 of 1000 : Training Loss 0.25665 | Validation loss 0.28228 | Validation Score 0.73611 | Eta 0.11s\n",
      "Epoch    7 of 1000 : Training Loss 0.26660 | Validation loss 0.29177 | Validation Score 0.77083 | Eta 0.11s\n",
      "Epoch    8 of 1000 : Training Loss 0.27121 | Validation loss 0.29813 | Validation Score 0.79167 | Eta 0.11s\n",
      "Epoch    9 of 1000 : Training Loss 0.27481 | Validation loss 0.30183 | Validation Score 0.79861 | Eta 0.10s\n",
      "Epoch   10 of 1000 : Training Loss 0.27793 | Validation loss 0.30319 | Validation Score 0.81250 | Eta 0.10s\n",
      "Epoch   11 of 1000 : Training Loss 0.27602 | Validation loss 0.30321 | Validation Score 0.81944 | Eta 0.10s\n",
      "Epoch   12 of 1000 : Training Loss 0.27479 | Validation loss 0.30190 | Validation Score 0.82639 | Eta 0.10s\n",
      "Epoch   13 of 1000 : Training Loss 0.27312 | Validation loss 0.29943 | Validation Score 0.84028 | Eta 0.11s\n",
      "Epoch   14 of 1000 : Training Loss 0.26966 | Validation loss 0.29618 | Validation Score 0.84028 | Eta 0.11s\n",
      "Epoch   15 of 1000 : Training Loss 0.26467 | Validation loss 0.29244 | Validation Score 0.84028 | Eta 0.10s\n",
      "Epoch   16 of 1000 : Training Loss 0.26064 | Validation loss 0.28812 | Validation Score 0.84722 | Eta 0.10s\n",
      "Epoch   17 of 1000 : Training Loss 0.25710 | Validation loss 0.28324 | Validation Score 0.84722 | Eta 0.10s\n",
      "Epoch   18 of 1000 : Training Loss 0.25099 | Validation loss 0.27826 | Validation Score 0.84722 | Eta 0.10s\n",
      "Epoch   19 of 1000 : Training Loss 0.24557 | Validation loss 0.27308 | Validation Score 0.85417 | Eta 0.10s\n",
      "Epoch   20 of 1000 : Training Loss 0.24103 | Validation loss 0.26762 | Validation Score 0.85417 | Eta 0.11s\n",
      "Epoch   21 of 1000 : Training Loss 0.23466 | Validation loss 0.26223 | Validation Score 0.86111 | Eta 0.10s\n",
      "Epoch   22 of 1000 : Training Loss 0.22936 | Validation loss 0.25677 | Validation Score 0.86111 | Eta 0.10s\n",
      "Epoch   23 of 1000 : Training Loss 0.22308 | Validation loss 0.25147 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   24 of 1000 : Training Loss 0.21806 | Validation loss 0.24614 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   25 of 1000 : Training Loss 0.21372 | Validation loss 0.24067 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   26 of 1000 : Training Loss 0.20719 | Validation loss 0.23553 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   27 of 1000 : Training Loss 0.20269 | Validation loss 0.23037 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   28 of 1000 : Training Loss 0.19706 | Validation loss 0.22544 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   29 of 1000 : Training Loss 0.19299 | Validation loss 0.22048 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   30 of 1000 : Training Loss 0.18767 | Validation loss 0.21576 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   31 of 1000 : Training Loss 0.18360 | Validation loss 0.21106 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   32 of 1000 : Training Loss 0.17992 | Validation loss 0.20638 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   33 of 1000 : Training Loss 0.17485 | Validation loss 0.20198 | Validation Score 0.86806 | Eta 0.11s\n",
      "Epoch   34 of 1000 : Training Loss 0.17029 | Validation loss 0.19779 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   35 of 1000 : Training Loss 0.16630 | Validation loss 0.19375 | Validation Score 0.86806 | Eta 0.10s\n",
      "Epoch   36 of 1000 : Training Loss 0.16304 | Validation loss 0.18973 | Validation Score 0.87500 | Eta 0.10s\n",
      "Epoch   37 of 1000 : Training Loss 0.15925 | Validation loss 0.18586 | Validation Score 0.87500 | Eta 0.10s\n",
      "Epoch   38 of 1000 : Training Loss 0.15573 | Validation loss 0.18210 | Validation Score 0.87500 | Eta 0.10s\n",
      "Epoch   39 of 1000 : Training Loss 0.15234 | Validation loss 0.17847 | Validation Score 0.88194 | Eta 0.10s\n",
      "Epoch   40 of 1000 : Training Loss 0.14902 | Validation loss 0.17496 | Validation Score 0.88194 | Eta 0.10s\n",
      "Epoch   41 of 1000 : Training Loss 0.14626 | Validation loss 0.17150 | Validation Score 0.88194 | Eta 0.10s\n",
      "Epoch   42 of 1000 : Training Loss 0.14290 | Validation loss 0.16822 | Validation Score 0.88889 | Eta 0.10s\n",
      "Epoch   43 of 1000 : Training Loss 0.13987 | Validation loss 0.16506 | Validation Score 0.88889 | Eta 0.10s\n",
      "Epoch   44 of 1000 : Training Loss 0.13711 | Validation loss 0.16199 | Validation Score 0.88889 | Eta 0.10s\n",
      "Epoch   45 of 1000 : Training Loss 0.13414 | Validation loss 0.15909 | Validation Score 0.88889 | Eta 0.10s\n",
      "Epoch   46 of 1000 : Training Loss 0.13157 | Validation loss 0.15627 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   47 of 1000 : Training Loss 0.12870 | Validation loss 0.15360 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   48 of 1000 : Training Loss 0.12650 | Validation loss 0.15099 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   49 of 1000 : Training Loss 0.12462 | Validation loss 0.14837 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   50 of 1000 : Training Loss 0.12224 | Validation loss 0.14587 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   51 of 1000 : Training Loss 0.11990 | Validation loss 0.14347 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   52 of 1000 : Training Loss 0.11784 | Validation loss 0.14115 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   53 of 1000 : Training Loss 0.11589 | Validation loss 0.13889 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   54 of 1000 : Training Loss 0.11390 | Validation loss 0.13670 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   55 of 1000 : Training Loss 0.11221 | Validation loss 0.13455 | Validation Score 0.89583 | Eta 0.12s\n",
      "Epoch   56 of 1000 : Training Loss 0.11019 | Validation loss 0.13250 | Validation Score 0.89583 | Eta 0.11s\n",
      "Epoch   57 of 1000 : Training Loss 0.10877 | Validation loss 0.13045 | Validation Score 0.89583 | Eta 0.11s\n",
      "Epoch   58 of 1000 : Training Loss 0.10701 | Validation loss 0.12848 | Validation Score 0.89583 | Eta 0.11s\n",
      "Epoch   59 of 1000 : Training Loss 0.10505 | Validation loss 0.12662 | Validation Score 0.89583 | Eta 0.11s\n",
      "Epoch   60 of 1000 : Training Loss 0.10380 | Validation loss 0.12475 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   61 of 1000 : Training Loss 0.10173 | Validation loss 0.12303 | Validation Score 0.89583 | Eta 0.11s\n",
      "Epoch   62 of 1000 : Training Loss 0.10021 | Validation loss 0.12137 | Validation Score 0.89583 | Eta 0.10s\n",
      "Epoch   63 of 1000 : Training Loss 0.09910 | Validation loss 0.11970 | Validation Score 0.90278 | Eta 0.12s\n",
      "Epoch   64 of 1000 : Training Loss 0.09765 | Validation loss 0.11807 | Validation Score 0.90278 | Eta 0.11s\n",
      "Epoch   65 of 1000 : Training Loss 0.09663 | Validation loss 0.11644 | Validation Score 0.90278 | Eta 0.10s\n",
      "Epoch   66 of 1000 : Training Loss 0.09528 | Validation loss 0.11485 | Validation Score 0.91667 | Eta 0.11s\n",
      "Epoch   67 of 1000 : Training Loss 0.09411 | Validation loss 0.11329 | Validation Score 0.91667 | Eta 0.11s\n",
      "Epoch   68 of 1000 : Training Loss 0.09277 | Validation loss 0.11178 | Validation Score 0.91667 | Eta 0.11s\n",
      "Epoch   69 of 1000 : Training Loss 0.09111 | Validation loss 0.11040 | Validation Score 0.92361 | Eta 0.11s\n",
      "Epoch   70 of 1000 : Training Loss 0.08982 | Validation loss 0.10907 | Validation Score 0.92361 | Eta 0.11s\n",
      "Epoch   71 of 1000 : Training Loss 0.08902 | Validation loss 0.10772 | Validation Score 0.92361 | Eta 0.12s\n",
      "Epoch   72 of 1000 : Training Loss 0.08804 | Validation loss 0.10638 | Validation Score 0.93056 | Eta 0.11s\n",
      "Epoch   73 of 1000 : Training Loss 0.08704 | Validation loss 0.10506 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   74 of 1000 : Training Loss 0.08553 | Validation loss 0.10385 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   75 of 1000 : Training Loss 0.08495 | Validation loss 0.10259 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   76 of 1000 : Training Loss 0.08418 | Validation loss 0.10134 | Validation Score 0.93750 | Eta 0.11s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch   77 of 1000 : Training Loss 0.08292 | Validation loss 0.10015 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   78 of 1000 : Training Loss 0.08174 | Validation loss 0.09904 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   79 of 1000 : Training Loss 0.08108 | Validation loss 0.09790 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   80 of 1000 : Training Loss 0.08035 | Validation loss 0.09677 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   81 of 1000 : Training Loss 0.07929 | Validation loss 0.09570 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   82 of 1000 : Training Loss 0.07808 | Validation loss 0.09470 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   83 of 1000 : Training Loss 0.07750 | Validation loss 0.09369 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   84 of 1000 : Training Loss 0.07693 | Validation loss 0.09267 | Validation Score 0.93750 | Eta 0.10s\n",
      "Epoch   85 of 1000 : Training Loss 0.07583 | Validation loss 0.09171 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   86 of 1000 : Training Loss 0.07524 | Validation loss 0.09075 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   87 of 1000 : Training Loss 0.07435 | Validation loss 0.08983 | Validation Score 0.93750 | Eta 0.11s\n",
      "Epoch   88 of 1000 : Training Loss 0.07368 | Validation loss 0.08891 | Validation Score 0.94444 | Eta 0.11s\n",
      "Epoch   89 of 1000 : Training Loss 0.07319 | Validation loss 0.08798 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   90 of 1000 : Training Loss 0.07199 | Validation loss 0.08715 | Validation Score 0.95139 | Eta 0.10s\n",
      "Epoch   91 of 1000 : Training Loss 0.07126 | Validation loss 0.08634 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   92 of 1000 : Training Loss 0.07070 | Validation loss 0.08554 | Validation Score 0.95139 | Eta 0.10s\n",
      "Epoch   93 of 1000 : Training Loss 0.07055 | Validation loss 0.08467 | Validation Score 0.95139 | Eta 0.10s\n",
      "Epoch   94 of 1000 : Training Loss 0.06943 | Validation loss 0.08388 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   95 of 1000 : Training Loss 0.06890 | Validation loss 0.08310 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   96 of 1000 : Training Loss 0.06855 | Validation loss 0.08229 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   97 of 1000 : Training Loss 0.06778 | Validation loss 0.08153 | Validation Score 0.95139 | Eta 0.11s\n",
      "Epoch   98 of 1000 : Training Loss 0.06718 | Validation loss 0.08078 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch   99 of 1000 : Training Loss 0.06653 | Validation loss 0.08006 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  100 of 1000 : Training Loss 0.06594 | Validation loss 0.07935 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  101 of 1000 : Training Loss 0.06537 | Validation loss 0.07866 | Validation Score 0.95833 | Eta 0.11s\n",
      "Epoch  102 of 1000 : Training Loss 0.06471 | Validation loss 0.07800 | Validation Score 0.95833 | Eta 0.11s\n",
      "Epoch  103 of 1000 : Training Loss 0.06455 | Validation loss 0.07730 | Validation Score 0.95833 | Eta 0.11s\n",
      "Epoch  104 of 1000 : Training Loss 0.06406 | Validation loss 0.07660 | Validation Score 0.95833 | Eta 0.11s\n",
      "Epoch  105 of 1000 : Training Loss 0.06337 | Validation loss 0.07594 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  106 of 1000 : Training Loss 0.06286 | Validation loss 0.07529 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  107 of 1000 : Training Loss 0.06222 | Validation loss 0.07468 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  108 of 1000 : Training Loss 0.06187 | Validation loss 0.07405 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  109 of 1000 : Training Loss 0.06128 | Validation loss 0.07346 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  110 of 1000 : Training Loss 0.06090 | Validation loss 0.07286 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  111 of 1000 : Training Loss 0.06064 | Validation loss 0.07224 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  112 of 1000 : Training Loss 0.06001 | Validation loss 0.07166 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  113 of 1000 : Training Loss 0.05959 | Validation loss 0.07109 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  114 of 1000 : Training Loss 0.05902 | Validation loss 0.07054 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  115 of 1000 : Training Loss 0.05878 | Validation loss 0.06998 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  116 of 1000 : Training Loss 0.05805 | Validation loss 0.06947 | Validation Score 0.95833 | Eta 0.10s\n",
      "Epoch  117 of 1000 : Training Loss 0.05784 | Validation loss 0.06894 | Validation Score 0.95833 | Eta 0.10s\n",
      "\n",
      " Validation Score not imporving for 20 iterations\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "binary = MLPClassifier()\n",
    "binary.fit(X_train_bin,y_train_bin,hidden_layer_neurons=100,early_stopping=True,activation='logistic',learning_rate='constant',\n",
    "           n_iter_no_change=20,learning_rate_init=0.1,alpha=0,validation_fraction=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "eR3YWjWpbJLq",
    "outputId": "fe4d53a3-197a-4e48-d63f-272b9442a985"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLASSIFICAION REPORT \n",
      " \n",
      "\n",
      "Accuracy 0.9659 \n",
      "\n",
      "Number of correct predictions 1388 / 1437 \n",
      "\n",
      "Confusion Matrix\n",
      " [[1283    9]\n",
      " [  40  105]]\n",
      "Recall 0.0756\n",
      "Precision 0.9211\n",
      "F1 score 0.8108\n"
     ]
    }
   ],
   "source": [
    "bin_train_preds = binary.predict(X_train)\n",
    "class_report(np.array(y_train_bin),np.array(bin_train_preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "F-ZF1yw8xnrT",
    "outputId": "f906a526-1986-4959-9d7e-a039f14fef3d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLASSIFICAION REPORT \n",
      " \n",
      "\n",
      "Accuracy 0.9333 \n",
      "\n",
      "Number of correct predictions 336 / 360 \n",
      "\n",
      "Confusion Matrix\n",
      " [[318   5]\n",
      " [ 19  18]]\n",
      "Recall 0.0536\n",
      "Precision 0.7826\n",
      "F1 score 0.6000\n"
     ]
    }
   ],
   "source": [
    "bin_preds = binary.predict(X_test_bin)\n",
    "class_report(np.array(y_test_bin),np.array(bin_preds))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aUxLHzIYAi_y"
   },
   "source": [
    "#Regression using MLPRegressor\n",
    "#Extra Credits\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 121
    },
    "colab_type": "code",
    "id": "31PdCFlSAkCW",
    "outputId": "955c5174-b2bb-423d-bf45-978ba23e05f2"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'google'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-23-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mdrive\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'/content/drive'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'google'"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bYouaC6jA30f"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/content/drive/My Drive/winequality-red.csv',sep=\";\")\n",
    "df = df.sample(frac=1) \n",
    "df=df.drop(columns =['free sulfur dioxide','citric acid'])\n",
    "for i in range(df.shape[0]):\n",
    "    if df[\"quality\"][i]<=5:\n",
    "        df[\"quality\"][i]=0\n",
    "    else:\n",
    "        df[\"quality\"][i]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ukIOCrCXBE2R"
   },
   "outputs": [],
   "source": [
    "X_reg = standardize(df.drop(columns=\"quality\").values)\n",
    "y_reg=df['quality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VtAPVBhDkOrx"
   },
   "outputs": [],
   "source": [
    "def error_reg(y,pred):\n",
    "  pred=pred>0.5\n",
    "  return y==pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6yojtLQ9BVhl"
   },
   "outputs": [],
   "source": [
    "class MLPregression():\n",
    "\n",
    "  def initializeTheta(self,in_neurons,out_neurons):\n",
    "    self.theta1=np.random.uniform(low=-1, high=1, size=(in_neurons+1,self.hidden_layer_neurons))\n",
    "    self.theta2=np.random.uniform(low=-1, high=1, size=(self.hidden_layer_neurons+1,out_neurons))\n",
    "  \n",
    "  def logistic(self,z):\n",
    "    return 1/(1+np.exp(-z))\n",
    "    #return expit(z)\n",
    "  \n",
    "  def logistic_der(self,z):\n",
    "    return self.logistic(z)*(1-self.logistic(z))\n",
    "  \n",
    "  def relu(self,z):\n",
    "    z[z<0]=0\n",
    "    return z\n",
    "\n",
    "  def relu_der(self,z):\n",
    "    z[z<=0]=0\n",
    "    z[z>0]=1\n",
    "    return z\n",
    "\n",
    "  def tanh(self,z):\n",
    "    return np.tanh(z)\n",
    "\n",
    "  def tanh_der(self,z):\n",
    "    return 1-self.tanh(z)**2\n",
    "\n",
    "  def feed_forward(self,X,binary=False):\n",
    "    a1 = self.activation(np.dot(self.theta1.T,X))\n",
    "    ones = np.ones(1) \n",
    "    a1 = np.concatenate((ones,a1)) \n",
    "    a2 = self.logistic(np.dot(self.theta2.T,a1))\n",
    "    return a1,a2\n",
    "\n",
    "  def adaptive_learning_rate(self):\n",
    "    self.learning_rate_init = self.learning_rate_init/10\n",
    "\n",
    "  def back_prop(self,a1,a2,X,y,binary=False):\n",
    "    grad2 = self.derivative(np.dot(self.theta1.T,X))\n",
    "    ones = np.ones(1) \n",
    "    grad2 = np.concatenate((ones,grad2))\n",
    "    self.theta2 -= self.learning_rate_init*np.multiply(a1.reshape(a1.shape[0],1),(a2-y).reshape(1,1))/self.size-self.alpha*self.theta2/self.size\n",
    "    self.theta1-= self.learning_rate_init*np.dot(X.reshape(X.shape[0],1),np.multiply(grad2,np.dot(self.theta2,(a2-y))).reshape(1,self.hidden_layer_neurons+1))[:,1:]/self.size-self.alpha*self.theta1/self.size\n",
    "\n",
    "  def fit(self, X, y, hidden_layer_neurons=2, activation= 'tanh', regularizer=None,alpha=0.0001,\n",
    "          learning_rate='constant', learning_rate_init=0.1,max_iter=1000, tol = 0.0001, verbose=False, early_stopping=False,\n",
    "          validation_fraction=0.1, n_iter_no_change=10,**kwargs):\n",
    "    self.alpha=alpha\n",
    "    self.hidden_layer_neurons = hidden_layer_neurons\n",
    "    self.learning_rate_init=learning_rate_init\n",
    "    self.a=learning_rate_init\n",
    "    self.initializeTheta(X.shape[1],1)\n",
    "    print(self.theta1.shape)\n",
    "    #selecting activation \n",
    "    if activation =='tanh':\n",
    "      self.activation=self.tanh\n",
    "      self.derivative =self.tanh_der\n",
    "    elif activation=='relu':\n",
    "      self.activation=self.relu\n",
    "      self.derivative=self.relu_der\n",
    "    else:\n",
    "      self.activation=self.logistic\n",
    "      self.derivative=self.logistic_der\n",
    "\n",
    "    decay = learning_rate_init/max_iter\n",
    "    learn = self.learning_rate_init\n",
    "    y_train=y\n",
    "    \n",
    "    ones = np.ones([X.shape[0],1])\n",
    "    X_train = np.concatenate((ones,X),axis=1)\n",
    "    avg_val_score = []\n",
    "    avg_train_loss = [] \n",
    "    avg_val_loss = []\n",
    "    if early_stopping:\n",
    "      X_train,X_val,y_train,y_val = partition(X_train,y_train,validation_fraction)\n",
    "    self.size = X_train.shape[0]\n",
    "    for i in range(max_iter):\n",
    "      start = time.time()\n",
    "      val_loss = np.zeros(X_val.shape[0])\n",
    "      train_loss = np.zeros(X_train.shape[0])\n",
    "      rand_idx_train = np.arange(0,X_train.shape[0])\n",
    "      random.shuffle(rand_idx_train)\n",
    "      for m in range(X_train.shape[0]):\n",
    "        #feed forward\n",
    "        idx = rand_idx_train[m]\n",
    "        #feed forward\n",
    "        a1,a2 = self.feed_forward(X_train[idx])\n",
    "        train_loss[m]= cross_entropy_loss(y_train[idx],a2)\n",
    "        #back propogation\n",
    "        self.back_prop(a1,a2,X_train[idx],np.array(y_train[idx]))\n",
    "        #early stopping val score\n",
    "      if early_stopping:\n",
    "        val_score = np.zeros(X_val.shape[0])\n",
    "        rand_idx_val = np.arange(0,X_val.shape[0])\n",
    "        random.shuffle(rand_idx_val)\n",
    "        for n in range(X_val.shape[0]):\n",
    "          idx = rand_idx_val[n]\n",
    "          a1,a2 = self.feed_forward(X_val[idx])\n",
    "          val_score[n]= error_reg(y_val[idx],a2)\n",
    "          val_loss[n]= cross_entropy_loss(y_val[idx],a2)\n",
    "        avg_val_score.append(np.mean(val_score))\n",
    "        avg_val_loss.append(np.mean(val_loss))\n",
    "      avg_train_loss.append(np.mean(train_loss))\n",
    "      end = time.time()\n",
    "      print(\"Epoch %4d of %4d : Training Loss %-2.5f | Validation loss %-2.5f | Validation Score %-2.5f | Eta %-2.2fs\" \n",
    "            %(i+1,max_iter,np.mean(train_loss),np.mean(val_loss),np.mean(val_score),(end-start)))\n",
    "  \n",
    "      if n_iter_no_change<i and early_stopping:\n",
    "        score = np.mean(np.absolute(avg_val_score[-n_iter_no_change:]))\n",
    "        loss = np.mean(np.absolute(avg_val_loss[-n_iter_no_change:]))\n",
    "        if np.mean(val_score) <=score+tol:\n",
    "          if learning_rate != 'constant' and self.learning_rate_init>10**-5*learn:\n",
    "              self.adaptive_learning_rate()\n",
    "              print('\\nChaning learning rate to',self.learning_rate_init)\n",
    "          else:\n",
    "            print('\\n Validation Score not imporving for %d iterations'%(n_iter_no_change))\n",
    "            break\n",
    "    plot_loss_epochs(avg_train_loss,avg_val_loss)\n",
    "    plot_score_epochs(avg_val_score)\n",
    "    plt.show() \n",
    "    \n",
    "  def predict(self,X):\n",
    "    preds = np.zeros((X.shape[0]),dtype=int)\n",
    "    ones = np.ones([X.shape[0],1])\n",
    "    X= np.concatenate((ones,X),axis=1)\n",
    "    for i in range(X.shape[0]):\n",
    "      a1,a2 = self.feed_forward(X[i])\n",
    "      preds[i]=int (a2>0.5)\n",
    "    return preds\n",
    "\n",
    "  def __init__(self):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zTQRte8ZKQVS"
   },
   "outputs": [],
   "source": [
    "X_train_reg,X_test_reg,y_train_reg,y_test_reg =partition(X_reg,y_reg,0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "_jQ1CSejKi-G",
    "outputId": "5de9dbec-b133-460a-ec42-8df1b938415a"
   },
   "outputs": [],
   "source": [
    "reg =MLPregression()\n",
    "reg.fit(X_train_reg,np.array(y_train_reg),hidden_layer_neurons=100,early_stopping=True,regularizer='l2',activation='logistic',\n",
    "        learning_rate_init=0.1,n_iter_no_change=30,learning_rate='adaptive',verbose=True,validation_fraction=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "21UNE5oaWCb8",
    "outputId": "6a8b422b-7c2e-4d0b-af86-1bd0c3ebf796"
   },
   "outputs": [],
   "source": [
    "reg_train_pred = reg.predict(X_train_reg)\n",
    "class_report(np.array(y_train_reg),np.array(reg_train_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "R6p_CKwmMvYZ",
    "outputId": "5c02d7b2-7012-4526-d098-82087b6a30da"
   },
   "outputs": [],
   "source": [
    "reg_preds= reg.predict(X_test_reg)\n",
    "class_report(np.array(y_test_reg),np.array(reg_preds))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.9797641 ,  0.58862518, -0.0894645 ,  2.8832725 ,  1.97282522,\n",
       "         2.85639459,  3.04639255,  3.61193649,  0.96296734,  2.25602691],\n",
       "       [ 0.58534902,  1.57284462,  0.66706853,  2.49591838,  1.80601861,\n",
       "         1.95820602,  1.61227279,  2.30918539,  2.18494733,  1.32485032],\n",
       "       [ 2.01794558,  3.22727187,  3.05712159,  2.74167049,  1.66908223,\n",
       "         1.00958708,  1.23814594,  0.73259839,  1.3132321 ,  3.34319947],\n",
       "       [ 2.358503  ,  1.99433329,  0.41480824,  2.21396511,  0.49160159,\n",
       "         2.12137956,  1.22478334,  3.43031301,  4.80246969,  1.4815953 ],\n",
       "       [ 2.19251631,  2.09775293,  2.30221702,  2.37767677,  0.78465851,\n",
       "         0.62956395,  1.2050741 ,  2.35158309, -0.42961828,  2.2294331 ],\n",
       "       [ 0.94431657,  2.4974295 ,  1.89033643,  3.05878528,  1.70570985,\n",
       "         3.88283947,  1.2313488 ,  2.931625  ,  3.38192254,  0.56427785],\n",
       "       [ 1.11906091,  2.29300462,  3.11002737,  3.93150959,  1.41610302,\n",
       "         0.92506807,  2.17655452,  2.09886361,  2.76622131,  2.35607287],\n",
       "       [ 3.14468561,  2.39749282,  0.44849705,  3.29175412,  0.66457315,\n",
       "         0.13192036,  0.32910256,  2.44345022,  2.45071718,  1.62902012],\n",
       "       [ 0.69716788,  2.71228148,  0.41034264,  3.11151538,  2.77631416,\n",
       "         3.05865783,  2.23429284,  0.41588554,  3.36888525,  3.66953581],\n",
       "       [ 2.9675014 ,  1.8493883 ,  0.56791129,  1.576965  ,  1.19547684,\n",
       "         1.65283631,  4.42670542,  1.82316974,  2.85650767,  2.73368207]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(10, 10) +2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "saxena_aniruddh_bhandari_dipal_4.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
